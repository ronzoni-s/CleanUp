<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ErbertPranzi.Server</name>
    </assembly>
    <members>
        <member name="T:ErbertPranzi.Server.Controllers.BaseApiController`1">
            <summary>
            Abstract BaseApi Controller Class
            </summary>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.AccountController.UpdateProfile(ErbertPranzi.Application.Requests.Identity.UpdateProfileRequest)">
            <summary>
            Update Profile
            </summary>
            <param name="model"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.AccountController.ChangePassword(ErbertPranzi.Application.Requests.Identity.ChangePasswordRequest)">
            <summary>
            Change Password
            </summary>
            <param name="model"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.AccountController.GetProfilePictureAsync(System.String)">
            <summary>
            Get Profile picture by Id
            </summary>
            <param name="userId"></param>
            <returns>Status 200 OK </returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.AccountController.UpdateProfilePictureAsync(ErbertPranzi.Application.Requests.Identity.UpdateProfilePictureRequest)">
            <summary>
            Update Profile Picture
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.TokenController.Get(ErbertPranzi.Application.Requests.Identity.TokenRequest)">
            <summary>
            Get Token (Email, Password)
            </summary>
            <param name="model"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.TokenController.Refresh(ErbertPranzi.Application.Requests.Identity.RefreshTokenRequest)">
            <summary>
            Refresh Token
            </summary>
            <param name="model"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.UserController.GetAll">
            <summary>
            Get User Details
            </summary>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.UserController.GetById(System.String)">
            <summary>
            Get User By Id
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.UserController.GetRolesAsync(System.String)">
            <summary>
            Get User Roles By Id
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.UserController.UpdateRolesAsync(ErbertPranzi.Application.Requests.Identity.UpdateUserRolesRequest)">
            <summary>
            Update Roles for User
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.UserController.RegisterAsync(ErbertPranzi.Application.Requests.Identity.RegisterRequest)">
            <summary>
            Register a User
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.UserController.ConfirmEmailAsync(System.String,System.String)">
            <summary>
            Confirm Email
            </summary>
            <param name="userId"></param>
            <param name="code"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.UserController.ToggleUserStatusAsync(ErbertPranzi.Application.Requests.Identity.ToggleUserStatusRequest)">
            <summary>
            Toggle User Status (Activate and Deactivate)
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.UserController.ResetPasswordAsync(ErbertPranzi.Application.Requests.Identity.ResetPasswordRequest)">
            <summary>
            Reset Password
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Identity.UserController.Export(System.String)">
            <summary>
            Export to Excel
            </summary>
            <param name="searchString"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.RoleClaimController.GetAll">
            <summary>
            Get All Role Claims(e.g. Product Create Permission)
            </summary>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.RoleClaimController.GetAllByRoleId(System.String)">
            <summary>
            Get All Role Claims By Id
            </summary>
            <param name="roleId"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.RoleClaimController.Post(ErbertPranzi.Application.Requests.Identity.RoleClaimRequest)">
            <summary>
            Add a Role Claim
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK </returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.RoleClaimController.Delete(System.Int32)">
            <summary>
            Delete a Role Claim
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.RoleController.GetAll">
            <summary>
            Get All Roles (basic, admin etc.)
            </summary>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.RoleController.Post(ErbertPranzi.Application.Requests.Identity.RoleRequest)">
            <summary>
            Add a Role
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.RoleController.Delete(System.String)">
            <summary>
            Delete a Role
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.RoleController.GetPermissionsByRoleId(System.String)">
            <summary>
            Get Permissions By Role Id
            </summary>
            <param name="roleId"></param>
            <returns>Status 200 Ok</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.RoleController.Update(ErbertPranzi.Application.Requests.Identity.PermissionRequest)">
            <summary>
            Edit a Role Claim
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Utilities.AuditsController.GetUserTrailsAsync">
            <summary>
            Get Current User Audit Trails
            </summary>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Utilities.AuditsController.ExportExcel(System.String,System.Boolean,System.Boolean)">
            <summary>
            Search Audit Trails and Export to Excel
            </summary>
            <param name="searchString"></param>
            <param name="searchInOldValues"></param>
            <param name="searchInNewValues"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="T:ErbertPranzi.Server.Controllers.Utilities.ExtendedAttributes.Base.ExtendedAttributesController`4">
            <summary>
            Abstract Extended Attributes Controller Class
            </summary>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Utilities.ExtendedAttributes.Base.ExtendedAttributesController`4.GetAll">
            <summary>
            Get All Entity Extended Attributes
            </summary>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Utilities.ExtendedAttributes.Base.ExtendedAttributesController`4.GetAllByEntityId(`1)">
            <summary>
            Get All Entity Extended Attributes by entity id
            </summary>
            <param name="entityId"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Utilities.ExtendedAttributes.Base.ExtendedAttributesController`4.GetById(`0)">
            <summary>
            Get Entity Extended Attribute By Id
            </summary>
            <param name="id"></param>
            <returns>Status 200 Ok</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Utilities.ExtendedAttributes.Base.ExtendedAttributesController`4.Post(ErbertPranzi.Application.Features.ExtendedAttributes.Commands.AddEdit.AddEditExtendedAttributeCommand{`0,`1,`2,`3})">
            <summary>
            Create/Update a Entity Extended Attribute
            </summary>
            <param name="command"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Utilities.ExtendedAttributes.Base.ExtendedAttributesController`4.Delete(`0)">
            <summary>
            Delete a Entity Extended Attribute
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Utilities.ExtendedAttributes.Base.ExtendedAttributesController`4.Export(System.String,`1,System.Boolean,System.Boolean,System.String)">
            <summary>
            Search Entity Extended Attribute and Export to Excel
            </summary>
            <param name="searchString"></param>
            <param name="entityId"></param>
            <param name="includeEntity"></param>
            <param name="onlyCurrentGroup"></param>
            <param name="currentGroup"></param>
            <returns></returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.Utilities.PreferencesController.ChangeLanguageAsync(System.String)">
            <summary>
            Change Language Preference
            </summary>
            <param name="languageCode"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.v1.Catalog.OrdersController.GetAll(System.Int32,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            Get All Orders
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="searchString"></param>
            <param name="orderBy"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.v1.Catalog.OrdersController.GetById(System.Int32)">
            <summary>
            Get a Order By Id
            </summary>
            <param name="id"></param>
            <returns>Status 200 Ok</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.v1.Catalog.OrdersController.Complete(ErbertPranzi.Application.Features.Orders.Commands.Complete.CompleteOrderCommand)">
            <summary>
            Complete a Order
            </summary>
            <param name="command"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.v1.Catalog.OrdersController.Post(ErbertPranzi.Application.Features.Orders.Commands.AddEdit.AddOrderCommand)">
            <summary>
            Add a Order
            </summary>
            <param name="command"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.v1.Catalog.OrdersController.Delete(System.Int32)">
            <summary>
            Delete a Order
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK response</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.v1.Catalog.OrdersController.Export(System.String)">
            <summary>
            Search Orders and Export to Excel
            </summary>
            <param name="searchString"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.v1.Catalog.ProductsController.GetAll(System.Int32,System.Int32,System.String,System.Boolean,System.String,System.Nullable{System.Int32})">
            <summary>
            Get All Products
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="searchString"></param>
            <param name="orderBy"></param>
            <param name="hideNotActive"></param>
            <param name="orderId"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.v1.Catalog.ProductsController.GetOrderProducts(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Get Order Products
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="searchString"></param>
            <param name="orderBy"></param>
            <param name="orderId"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.v1.Catalog.ProductsController.Post(ErbertPranzi.Application.Features.Products.Commands.AddEdit.AddEditProductCommand)">
            <summary>
            Add/Edit a Product
            </summary>
            <param name="command"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.v1.Catalog.ProductsController.Update(ErbertPranzi.Application.Features.Products.Commands.Update.UpdateProductCommand)">
            <summary>
            Update Products
            </summary>
            <param name="command"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.v1.Catalog.ProductsController.Delete(System.Int32)">
            <summary>
            Delete a Product
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK response</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Controllers.v1.Catalog.ProductsController.Export(System.String)">
            <summary>
            Search Products and Export to Excel
            </summary>
            <param name="searchString"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:ErbertPranzi.Server.Jobs.ImportOrdersJob.IsProduct(System.String)">
            <summary>
            Checks if the line contains 7 fields. If not returns false, otherwise true.
            </summary>
            <param name="line"></param>
            <returns>true if is a product line, otherwise false</returns>
        </member>
    </members>
</doc>
