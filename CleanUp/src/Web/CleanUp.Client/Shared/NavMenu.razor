@using System.Security.Claims
@using CleanUp.WebApi.Sdk.Constants.Permission

<UserCard />
<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">Home</MudNavLink>
    @*@if (_canViewHangfire)
    {
        <MudNavLink Href="/jobs" Target="_blank" Icon="@Icons.Material.Outlined.Work">
            @_localizer["Hangfire"]
        </MudNavLink>
    }*@

    @if (_canViewUsers || _canViewEvents)
    {
        <MudListSubheader Class="mt-2 mb-n2">Amministrazione</MudListSubheader>
    }

    @if (_canViewUsers)
    {
        
        <MudNavLink Href="/users" Icon="@Icons.Filled.AccountCircle">
            Utenti
        </MudNavLink>
    }

    @if (_canViewEvents)
    {
        <MudNavLink Href="/events" Icon="@Icons.Filled.Event">
            Eventi
        </MudNavLink>
    }

    <MudNavLink Href="/operations" Icon="@Icons.Outlined.WatchLater">
        Interventi giornalieri
    </MudNavLink>
</MudNavMenu>

@code {
    private ClaimsPrincipal _authenticationStateProviderUser;

    private bool _canViewUsers;
    private bool _canViewEvents;

    protected override async Task OnParametersSetAsync()
    {
        _authenticationStateProviderUser = await stateProvider.GetAuthenticationStateProviderUserAsync();
        //_canViewHangfire = (await authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Hangfire.View)).Succeeded;
        //_canViewOrders = (await authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Orders.View)).Succeeded;
        //_canViewProducts = (await authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Products.View)).Succeeded;
        //_vanViewReceiptEod = (await authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.ReceiptEod.View)).Succeeded;
        _canViewUsers = (await authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.User.View)).Succeeded;
        _canViewEvents = (await authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Event.View)).Succeeded;
        //_canViewUsers = (await authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.User.View)).Succeeded;;
    }
}