@page "/order/new/complete"
@page "/order/edit/{OrderId:int}/complete"
@using CleanUp.Client.Helpers
@using System.Globalization

@attribute [Authorize]

<PageTitle>Ordine</PageTitle>

@if (orderValidationLoading)
{
    <CleanUp.Client.Shared.Components.LoadingScreen />
}

<div id="new-order" class="px-5">
    
    <div class="d-flex justify-content-between">
        <div>
            <h1>@(Action == ACTION.NEW_ORDER ? "Nuovo ordine" : $"Modifica ordine #{OrderId}")</h1>
        </div>
        <div>
            <table class="totals">
                <tr>
                    <td class="total">Totale</td>
                    <td class="@(cartService.MinimumOrderItems != null && cartService.GetItemsNumber < cartService.MinimumOrderItems.Value ? "error" : string.Empty)">Pezzi: 
                        <label>
                            @(cartService.GetItemsNumber) @(cartService.MinimumOrderItems != null ? $"({cartService.MinimumOrderItems})" : string.Empty)
                        </label>
                    </td>
                </tr>
                <tr>
                    <td></td>
                    <td class="@(cartService.MinimumOrderAmount != null && cartService.CalculatedPrice < cartService.MinimumOrderAmount.Value ? "error" : string.Empty)">Euro: <label>@(string.Format("{0:0.00}", cartService.CalculatedPrice)) @(cartService.MinimumOrderAmount != null ? $"({cartService.MinimumOrderAmount})" : string.Empty)</label></td>
                </tr>
            </table>
        </div>
    </div>
    
    <div class="d-flex justify-content-between">
        <div>
            <div class="d-flex"><div class="p-2"><button class="btn btn-primary" @onclick="NavigateBack">INDIETRO</button></div></div>
        </div>

        <div class="d-flex">
            @if (Action == ACTION.NEW_ORDER)
            {
                <div class="p-2"><button class="btn btn-primary" @onclick="CancelOrder">ANNULLA</button></div>
            }
            
            @if (MinimumOrderNotReachedButton)
            {
                <div class="p-2"><button class="btn btn-secondary order-not-valid" disabled>NON E' STATO RAGGIUNTO IL MINIMO D'ORDINE</button></div>
            }
            else if (!SendButtonEnabled)
            {
                <div class="p-2"><button class="btn btn-primary" disabled>@(Action == ACTION.NEW_ORDER ? "INVIA ORDINE" : "MODIFICA ORDINE")</button></div>
            }
            else
            {
                <div class="p-2"><button class="btn btn-primary" @onclick="SendOrder">@(Action == ACTION.NEW_ORDER ? "INVIA ORDINE" : "MODIFICA ORDINE")</button></div>
            }
        </div>
    </div>

    @*@if (Action == ACTION.EDIT_ORDER && canOrderBeModifiedLight)
    {
        <p>* L'ordine è già stato processato. Sarà solamente possibile rimuovere alcuni prodotti nei limiti delle quantità indicate</p>
    }*@

    <table class="table mt-5">
        <thead>
            <tr>
                <th></th>
                <th>SKU</th>
                <th>Nome prodotto</th>
                <th>Importo</th>
                <th>Prezzo scontato</th>
                @for (int i = 0; i < cartService.DeliveryDates.Count; i++)
                {
                    <th>@cartService.DeliveryDates[i].Date.ToString("ddd dd/MM/yyyy", new CultureInfo("it-IT"))</th>
                }
                <th>Subtotale</th>
            </tr>
        </thead>
        <tbody>
            @if (loading)
            {
                int colspan = 6 + cartService.DeliveryDates.Count;

                <tr>
                    <td colspan="@colspan" class="text-center">Caricamento...</td>
                </tr>
            }
            else
            {
                @foreach (var orderProduct in cartService.GetCartProducts())
                {
                    <tr>
                        <td><a href="" tabindex="-1" @onclick="() => ProductInfoModal.Open(catalogId, orderProduct.ProductId)" @onclick:preventDefault><img src="/img/info-icon.svg" /></a></td>
                        <td>@orderProduct.Product.Code</td>
                        <td>@orderProduct.Product.Name</td>
                        <td>€ @(Math.Round(orderProduct.Price, 2).ToString("0.00"))</td>
                        <td>€ @(Math.Round(orderProduct.FinalPrice, 2).ToString("0.00"))</td>

                        @for (int i = 0; i < cartService.DeliveryDates.Count; i++)
                        {
                            int _i = i;

                            <td>
                                @if ((Action == ACTION.NEW_ORDER || orderProduct.Slots[_i].Quantity == 0) && !InventoryHelper.IsProductAvailableForDeliveryDate(orderProduct.Product, cartService.DeliveryDates[_i].Date))
                                {
                                    <input type="number" @bind="orderProduct.Slots[_i].Quantity" disabled />
                                    <br/>
                                    <span>Non disponibile per questa data di consegna</span>
                                }
                                else if (Action == ACTION.EDIT_ORDER &&
                                        orderProduct.Slots[_i].MinimumQuantityThreshold != null &&
                                        orderProduct.Slots[_i].Quantity == orderProduct.Slots[_i].MinimumQuantityThreshold.Value &&
                                        orderProduct.Slots[_i].MaximumQuantityThreshold != null &&
                                        orderProduct.Slots[_i].Quantity == orderProduct.Slots[_i].MaximumQuantityThreshold.Value)

                                {
                                    <input type="number" @bind="orderProduct.Slots[_i].Quantity" disabled />
                                }
                                else
                                {
                                    <input type="number" @bind="orderProduct.Slots[_i].Quantity" />    
                                    @if (Action == ACTION.EDIT_ORDER && orderProduct.Slots[_i].MinimumQuantityThreshold != null)
                                    {
                                        <br/><span> (num. minimo di prodotti: @(orderProduct.Slots[_i].MinimumQuantityThreshold))</span>
                                    }
                                }


                            </td>
                        }

                        <td>€ @(Math.Round(orderProduct.Slots.Sum(slot => slot.Quantity) * orderProduct.FinalPrice, 2).ToString("0.00"))</td>
                    </tr>
                }
            }
            
        </tbody>
    </table>

</div>

<CleanUp.Client.Shared.Components.ProductInfo @ref="ProductInfoModal" />