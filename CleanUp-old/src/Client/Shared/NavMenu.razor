@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> _localizer
@using System.Security.Claims

<UserCard />
<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">@_localizer["Home"]</MudNavLink>
    @*@if (_canViewHangfire)
        {
            <MudNavLink Href="/jobs" Target="_blank" Icon="@Icons.Material.Outlined.Work">
                @_localizer["Hangfire"]
            </MudNavLink>
        }*@
    @if (_canViewOrders || _canViewProducts || _vanViewReceiptEod)
    {
        <MudListSubheader Class="mt-2 mb-n2">Inventario</MudListSubheader>
        @if (_canViewOrders)
        {
            <MudNavLink Href="/catalog/orders" Icon="@Icons.Material.Outlined.ShoppingBag">
                Ordini
            </MudNavLink>
        }
        @if (_canViewProducts)
        {
            <MudNavLink Href="/catalog/products" Icon="@Icons.Filled.Inventory">
                Prodotti
            </MudNavLink>
        }
        @if (_vanViewReceiptEod)
        {
            <MudNavLink Href="/catalog/receipt-eod" Icon="@Icons.Filled.ReceiptLong">
                Chiusura fiscale
            </MudNavLink>
        }
    }
</MudNavMenu>

@code {
    private ClaimsPrincipal _authenticationStateProviderUser;

    private bool _canViewHangfire;
    private bool _canViewOrders;
    private bool _canViewProducts;
    private bool _vanViewReceiptEod;

    protected override async Task OnParametersSetAsync()
    {
        _authenticationStateProviderUser = await _stateProvider.GetAuthenticationStateProviderUserAsync();
        _canViewHangfire = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Hangfire.View)).Succeeded;
        _canViewOrders = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Orders.View)).Succeeded;
        _canViewProducts = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Products.View)).Succeeded;
        _vanViewReceiptEod = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.ReceiptEod.View)).Succeeded;
    }
}